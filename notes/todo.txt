x 1) get it to tell the user when they've answered something incorrectly

    https://www.hackingwithswift.com/books/ios-swiftui/creating-explicit-animations
x 2) get the easy/hard buttons to do different configurations
x 5) get it to work in dark mode
x 1) get your app to decode using generics


2) get a manager class to do all the generating of functions and answers for the review
3) implement a 'custom' level that lets users choose the parameteres
4) get it to work with different clefs
6) last 5 seconds play a little sound to countdown
7) review screen that shows two notes overlayed, one is red that is incorrect, one is green that is the correct answer, and you can swipe between mistakes. it shouldnt show you all mistakes, just your top 3 mistakes. with perahps some stats like 'you got this one wrong x times''
8) it can then ask you to play again, and double the probability of you seeing those ones
9) then, on the level select screen it can show some stats like (90% nailed)
10) over time, it can recomend you review after a certain amount of time - once youve reviewed and still have it nailed, it will mark it as 'mastered'. You can use notification centre for this.
11) A 'your activity' screen showing how much time spent practicing over certain days that uses swift charts
12) implement a 'learn' tab, and a 'progress' tab. Learn actually teaches, whereas progress lets you progress. You don't have to do the learning, you can just progress if you want. actually, maybe screw tabs and just put it all on one screen. a learn vs progress button? maybe put some time in to think about how you would do thsi in a UI friendly way
13) also, all the LEARN pages could be something like web views? thebn you aint gotta make em for both ios, android and the web.
14) teachers can verify that students have not made two accounts by checking device ID - that'll stop them from doing it for a mate!
15)
______

1) make an AnswerButton component (its not an actual button, just styling)
2) make a LevelButton component (same as above)
3) rather than having a ticker, put in a progress/timer bar!
4) implement a category in the JSON so that you can lay out your HStack levels in a scrollable VStack. The category could also determine the button colour. You can then make a title for the game view based on this information.
5) create instant feedback on correct/incorrect answers (see answer model, and answer model row). for this you should make 1) answer model, 2) answer button view. the hard bit, is you need to say which answer is correct and which answer isnt - perhaps a manager to generate each button along with the correct answers? 
6) interesting stuff on the decoding bit which actually does quite a lot of logic, you could use this but perhaps make it all happen in a manager isntead
